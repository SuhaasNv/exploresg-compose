services:
  postgres:
    image: postgres:15-alpine
    container_name: exploresg-postgres
    environment:
      POSTGRES_DB: "exploresg"
      POSTGRES_USER: "exploresguser"
      POSTGRES_PASSWORD: "exploresgpass"
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/00-schema.sql:/docker-entrypoint-initdb.d/00-schema.sql:ro
      - ./db/seed-fleet.sql:/docker-entrypoint-initdb.d/01-fleet-data.sql:ro
    networks:
      - exploresg-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  frontend:
    image: sreerajrone/exploresg-frontend-service:latest
    platform: linux/amd64
    container_name: exploresg-frontend
    ports:
      - "3000:3000"
    environment:
      # Runtime-injected envs consumed by frontend entrypoint to generate env.js
      API_BASE_URL: "http://localhost:8081"
      FLEET_API_BASE_URL: "http://localhost:8082"
      GOOGLE_CLIENT_ID: "182715694192-6q156lo1066sf1vi4o99kmfd1b22qqi7.apps.googleusercontent.com"
      MAPBOX_TOKEN: "pk.eyJ1Ijoic3JlZS1yLW9uZSIsImEiOiJjbTY1OTJjemQxc25zMmpvdWQ2MWN2aDlvIn0.VMrL_nkV5-W7-T4AcEY3qA"
      APP_ENV: "demo"
      DEBUG: "false"
    depends_on:
      auth:
        condition: service_started
      fleet:
        condition: service_started
    networks:
      - exploresg-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  auth:
    image: sreerajrone/exploresg-auth-service:latest
    platform: linux/amd64
    container_name: exploresg-auth
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    environment:
      SERVER_PORT: "8080"
      # Single external Postgres for all services
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/exploresg"
      SPRING_DATASOURCE_USERNAME: "exploresguser"
      SPRING_DATASOURCE_PASSWORD: "exploresgpass"
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: "org.postgresql.Driver"
      SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
      SPRING_SQL_INIT_MODE: "never"
      # Minimal security config required for startup
      JWT_SECRET_KEY: "dGhpc2lzbG9uZ2FuZHNlY3VyZXNlY3JldGtleTEyMzQ1Njc4OTA="
      OAUTH2_JWT_AUDIENCES: "182715694192-6q156lo1066sf1vi4o99kmfd1b22qqi7.apps.googleusercontent.com"
      OAUTH2_JWT_ISSUER_URI: "https://accounts.google.com"
      CORS_ALLOWED_ORIGINS: "http://localhost:3000"
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -fsS http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 5s
      start_period: 60s
      retries: 3
    networks:
      - exploresg-net
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  fleet:
    image: sreerajrone/exploresg-fleet-service:latest
    platform: linux/amd64
    container_name: exploresg-fleet
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    environment:
      SERVER_PORT: "8080"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/exploresg"
      SPRING_DATASOURCE_USERNAME: "exploresguser"
      SPRING_DATASOURCE_PASSWORD: "exploresgpass"
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: "org.postgresql.Driver"
      SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
      SPRING_SQL_INIT_MODE: "never"
      # Minimal security config required for startup
      JWT_SECRET_KEY: "dGhpc2lzbG9uZ2FuZHNlY3VyZXNlY3JldGtleTEyMzQ1Njc4OTA="
      OAUTH2_JWT_AUDIENCES: "182715694192-6q156lo1066sf1vi4o99kmfd1b22qqi7.apps.googleusercontent.com"
      OAUTH2_JWT_ISSUER_URI: "https://accounts.google.com"
      CORS_ALLOWED_ORIGINS: "http://localhost:3000"
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -fsS http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 5s
      start_period: 60s
      retries: 3
    networks:
      - exploresg-net
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  booking:
    image: sreerajrone/exploresg-booking-service:latest
    platform: linux/amd64
    container_name: exploresg-booking
    ports:
      - "8083:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -fsS http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 5s
      start_period: 60s
      retries: 3
    environment:
      SERVER_PORT: "8080"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/exploresg"
      SPRING_DATASOURCE_USERNAME: "exploresguser"
      SPRING_DATASOURCE_PASSWORD: "exploresgpass"
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: "org.postgresql.Driver"
      SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
      SPRING_SQL_INIT_MODE: "always"
    networks:
      - exploresg-net
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  payment:
    image: sreerajrone/exploresg-payment-service:latest
    platform: linux/amd64
    container_name: exploresg-payment
    ports:
      - "8084:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -fsS http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 5s
      start_period: 60s
      retries: 3
    environment:
      SERVER_PORT: "8080"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/exploresg"
      SPRING_DATASOURCE_USERNAME: "exploresguser"
      SPRING_DATASOURCE_PASSWORD: "exploresgpass"
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: "org.postgresql.Driver"
      SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
      SPRING_SQL_INIT_MODE: "always"
    networks:
      - exploresg-net
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # db-seeder removed for a clean compose; seeding handled by Postgres init scripts on fresh volumes


networks:
  exploresg-net:
    driver: bridge

volumes:
  pgdata:
    driver: local