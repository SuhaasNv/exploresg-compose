name: 🔧 Deploy Individual Service

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy'
        required: true
        type: choice
        options:
          - frontend
          - auth
          - fleet
          - booking
          - payment
          - all
      tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'latest'
      force_restart:
        description: 'Force restart even if no changes'
        required: false
        type: boolean
        default: false

env:
  DROPLET_IP: ${{ secrets.DO_DROPLET_IP }}
  DROPLET_USER: root
  DEPLOY_PATH: /opt/exploresg/docker-compose

jobs:
  deploy-service:
    name: 🔧 Deploy ${{ github.event.inputs.service }} Service
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Service Deployment
      run: |
        echo "🔧 Starting ${{ github.event.inputs.service }} Service Deployment"
        echo "📍 Target: ${{ env.DROPLET_IP }}"
        echo "🏷️ Tag: ${{ github.event.inputs.tag }}"
        echo "🔄 Force Restart: ${{ github.event.inputs.force_restart }}"
        
    - name: 🔐 Setup SSH Key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
        
    - name: 📋 Check Current Service Status
      run: |
        echo "📋 Checking current service status..."
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} \
          "cd ${{ env.DEPLOY_PATH }} && docker compose ps ${{ github.event.inputs.service }}" || echo "⚠️ Service not currently running"
          
    - name: 📦 Copy Updated Files
      if: github.event.inputs.service == 'all' || github.event.inputs.service == 'frontend'
      run: |
        echo "📦 Copying updated configuration files..."
        scp -o StrictHostKeyChecking=no compose.yaml ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }}:${{ env.DEPLOY_PATH }}/
        scp -o StrictHostKeyChecking=no nginx-gateway.conf ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }}:${{ env.DEPLOY_PATH }}/
        
    - name: 🐳 Pull Latest Image
      run: |
        echo "📥 Pulling latest image for ${{ github.event.inputs.service }}..."
        if [ "${{ github.event.inputs.service }}" = "all" ]; then
          ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} \
            "cd ${{ env.DEPLOY_PATH }} && docker compose pull"
        else
          ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} \
            "cd ${{ env.DEPLOY_PATH }} && docker compose pull ${{ github.event.inputs.service }}"
        fi
        
    - name: 🛑 Stop Service
      run: |
        echo "🛑 Stopping ${{ github.event.inputs.service }} service..."
        if [ "${{ github.event.inputs.service }}" = "all" ]; then
          ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} \
            "cd ${{ env.DEPLOY_PATH }} && docker compose stop"
        else
          ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} \
            "cd ${{ env.DEPLOY_PATH }} && docker compose stop ${{ github.event.inputs.service }}"
        fi
        
    - name: 🗑️ Remove Old Container
      run: |
        echo "🗑️ Removing old container..."
        if [ "${{ github.event.inputs.service }}" = "all" ]; then
          ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} \
            "cd ${{ env.DEPLOY_PATH }} && docker compose rm -f"
        else
          ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} \
            "cd ${{ env.DEPLOY_PATH }} && docker compose rm -f ${{ github.event.inputs.service }}"
        fi
        
    - name: 🚀 Start Service
      run: |
        echo "🚀 Starting ${{ github.event.inputs.service }} service..."
        if [ "${{ github.event.inputs.service }}" = "all" ]; then
          ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} \
            "cd ${{ env.DEPLOY_PATH }} && docker compose up -d"
        else
          ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} \
            "cd ${{ env.DEPLOY_PATH }} && docker compose up -d ${{ github.event.inputs.service }}"
        fi
        
    - name: ⏳ Wait for Service Startup
      run: |
        echo "⏳ Waiting for ${{ github.event.inputs.service }} to start..."
        sleep 30
        
    - name: 🏥 Service Health Check
      run: |
        echo "🏥 Checking ${{ github.event.inputs.service }} health..."
        
        case "${{ github.event.inputs.service }}" in
          "frontend")
            echo "Checking frontend..."
            curl -f http://${{ env.DROPLET_IP }}:3000 || echo "⚠️ Frontend not responding"
            ;;
          "auth")
            echo "Checking auth service..."
            curl -f http://${{ env.DROPLET_IP }}:8081/actuator/health || echo "⚠️ Auth service not responding"
            ;;
          "fleet")
            echo "Checking fleet service..."
            curl -f http://${{ env.DROPLET_IP }}:8082/actuator/health || echo "⚠️ Fleet service not responding"
            ;;
          "booking")
            echo "Checking booking service..."
            curl -f http://${{ env.DROPLET_IP }}:8083/actuator/health || echo "⚠️ Booking service not responding"
            ;;
          "payment")
            echo "Checking payment service..."
            curl -f http://${{ env.DROPLET_IP }}:8084/actuator/health || echo "⚠️ Payment service not responding"
            ;;
          "all")
            echo "Checking all services..."
            for service in frontend auth fleet booking payment; do
              case "$service" in
                "frontend") port=3000; path="" ;;
                "auth") port=8081; path="/actuator/health" ;;
                "fleet") port=8082; path="/actuator/health" ;;
                "booking") port=8083; path="/actuator/health" ;;
                "payment") port=8084; path="/actuator/health" ;;
              esac
              echo "Checking $service on port $port..."
              curl -f http://${{ env.DROPLET_IP }}:$port$path || echo "⚠️ $service not responding"
            done
            ;;
        esac
        
    - name: 📊 Service Status
      run: |
        echo "📊 Final service status:"
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} \
          "cd ${{ env.DEPLOY_PATH }} && docker compose ps ${{ github.event.inputs.service }}"
          
    - name: 🎉 Service Deployment Success
      if: success()
      run: |
        echo "🎉 ${{ github.event.inputs.service }} Service Deployment Successful!"
        case "${{ github.event.inputs.service }}" in
          "frontend")
            echo "🌐 Frontend: http://${{ env.DROPLET_IP }}:3000"
            ;;
          "auth")
            echo "🔗 Auth API: http://${{ env.DROPLET_IP }}:8081/actuator/health"
            ;;
          "fleet")
            echo "🔗 Fleet API: http://${{ env.DROPLET_IP }}:8082/api/v1/fleet/models"
            ;;
          "booking")
            echo "🔗 Booking API: http://${{ env.DROPLET_IP }}:8083/actuator/health"
            ;;
          "payment")
            echo "🔗 Payment API: http://${{ env.DROPLET_IP }}:8084/actuator/health"
            ;;
          "all")
            echo "🌐 Frontend: http://${{ env.DROPLET_IP }}:3000"
            echo "🔗 Fleet API: http://${{ env.DROPLET_IP }}:8082/api/v1/fleet/models"
            echo "🔗 Auth API: http://${{ env.DROPLET_IP }}:8081/actuator/health"
            ;;
        esac
