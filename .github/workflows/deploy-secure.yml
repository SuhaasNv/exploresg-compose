name: Deploy Secure Configuration

on:
  workflow_dispatch:
    inputs:
      generate_new_secrets:
        description: 'Generate new random secrets (recommended)'
        required: false
        type: boolean
        default: true

env:
  DROPLET_IP: ${{ secrets.DO_DROPLET_IP }}
  DROPLET_USER: root
  DEPLOY_PATH: /opt/exploresg/docker-compose

jobs:
  deploy-secure:
    name: Deploy Secure Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔐 Setup SSH Key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
        
    - name: 📦 Copy Updated Files
      run: |
        echo "📦 Copying updated files with security fixes..."
        scp -o StrictHostKeyChecking=no compose.yaml ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }}:${{ env.DEPLOY_PATH }}/
        scp -o StrictHostKeyChecking=no deploy-secure.sh ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }}:${{ env.DEPLOY_PATH }}/
        scp -o StrictHostKeyChecking=no env.example ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }}:${{ env.DEPLOY_PATH }}/
        scp -o StrictHostKeyChecking=no health-check.sh ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }}:${{ env.DEPLOY_PATH }}/
        
        # Make scripts executable
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} \
          "chmod +x ${{ env.DEPLOY_PATH }}/deploy-secure.sh"
        
    - name: 🔒 Create Secure Environment
      if: github.event.inputs.generate_new_secrets == 'true'
      run: |
        echo "🔒 Creating secure .env file with random secrets..."
        
        # Generate secure random values
        DB_PASSWORD="SecureDB_$(date +%s)_$(openssl rand -hex 8)"
        RABBITMQ_PASSWORD="SecureRabbitMQ_$(date +%s)_$(openssl rand -hex 8)"
        JWT_SECRET="$(openssl rand -base64 64)"
        
        # Create .env file on droplet using individual echo commands
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "echo '# ExploreSG Secure Environment Configuration' > ${{ env.DEPLOY_PATH }}/.env"
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "echo '# Generated on $(date)' >> ${{ env.DEPLOY_PATH }}/.env"
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "echo '' >> ${{ env.DEPLOY_PATH }}/.env"
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "echo '# Database Configuration' >> ${{ env.DEPLOY_PATH }}/.env"
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "echo 'POSTGRES_PASSWORD=$DB_PASSWORD' >> ${{ env.DEPLOY_PATH }}/.env"
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "echo '' >> ${{ env.DEPLOY_PATH }}/.env"
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "echo '# RabbitMQ Configuration' >> ${{ env.DEPLOY_PATH }}/.env"
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "echo 'RABBITMQ_PASSWORD=$RABBITMQ_PASSWORD' >> ${{ env.DEPLOY_PATH }}/.env"
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "echo '' >> ${{ env.DEPLOY_PATH }}/.env"
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "echo '# JWT Configuration' >> ${{ env.DEPLOY_PATH }}/.env"
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "echo 'JWT_SECRET_KEY=$JWT_SECRET' >> ${{ env.DEPLOY_PATH }}/.env"
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "echo '' >> ${{ env.DEPLOY_PATH }}/.env"
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "echo '# Mapbox Configuration' >> ${{ env.DEPLOY_PATH }}/.env"
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "echo 'MAPBOX_TOKEN=pk.eyJ1Ijoic3JlZS1yLW9uZSIsImEiOiJjbWgzeXFpb3cwd2R5MmlyNXgxcWRvcWw0In0.DDYbNKeGZkkpChwcKPI6pQ' >> ${{ env.DEPLOY_PATH }}/.env"
        
        echo "✅ Secure .env file created with random secrets"
        
    - name: 🔒 Use Existing Environment
      if: github.event.inputs.generate_new_secrets == 'false'
      run: |
        echo "🔒 Using existing .env file (if available)..."
        
        # Check if .env exists, if not create from example
        if ! ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "test -f ${{ env.DEPLOY_PATH }}/.env"; then
          echo "📋 Creating .env from example..."
          ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "cp ${{ env.DEPLOY_PATH }}/env.example ${{ env.DEPLOY_PATH }}/.env"
          echo "⚠️ Please update .env file with your secure values"
        else
          echo "✅ Using existing .env file"
        fi
        
    - name: 🚀 Deploy with Secure Configuration
      run: |
        echo "🚀 Deploying with secure configuration..."
        
        # Stop existing services
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} \
          "cd ${{ env.DEPLOY_PATH }} && docker compose down" || echo "⚠️ No existing services to stop"
        
        # Deploy with secure configuration
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} \
          "cd ${{ env.DEPLOY_PATH }} && docker compose up -d"
        
        echo "✅ Services deployed with secure configuration"
        
    - name: ⏳ Wait for Services
      run: |
        echo "⏳ Waiting for services to start..."
        sleep 30
        
    - name: 🏥 Health Check
      run: |
        echo "🏥 Running health checks..."
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} \
          "cd ${{ env.DEPLOY_PATH }} && ./health-check.sh" || echo "⚠️ Health check failed, but continuing..."
        
    - name: 📊 Deployment Status
      run: |
        echo "📊 Final deployment status:"
        ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} \
          "cd ${{ env.DEPLOY_PATH }} && docker compose ps"
        
    - name: ✅ Secure Deployment Complete
      run: |
        echo "✅ Secure deployment completed!"
        echo ""
        echo "🔒 Security improvements applied:"
        echo "- ✅ Environment variables configured"
        echo "- ✅ Random secrets generated (if requested)"
        echo "- ✅ Services restarted with secure config"
        echo "- ✅ Health checks performed"
        echo ""
        echo "📋 Next steps:"
        echo "1. Run 'Security Scan & Compliance' workflow to verify"
        echo "2. Test application functionality"
        echo "3. Monitor application logs"
