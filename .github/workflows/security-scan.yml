name: Security Scan & Compliance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        type: choice
        options:
          - full
          - containers
          - dependencies
          - configuration
      severity_threshold:
        description: 'Minimum severity to report'
        required: false
        type: choice
        options:
          - critical
          - high
          - medium
          - low
        default: 'medium'

env:
  DROPLET_IP: ${{ secrets.DO_DROPLET_IP }}
  DROPLET_USER: root
  DEPLOY_PATH: /opt/exploresg/docker-compose

jobs:
  security-scan:
    name: Security Scan & Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔐 Setup SSH Key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
        
    - name: 🐳 Container Vulnerability Scan
      if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'containers'
      run: |
        echo "🐳 Scanning container images for vulnerabilities..."
        
        # List of images to scan
        images=(
          "sreerajrone/exploresg-frontend-service:latest"
          "sreerajrone/exploresg-auth-service:latest"
          "sreerajrone/exploresg-fleet-service:latest"
          "sreerajrone/exploresg-booking-service:latest"
          "sreerajrone/exploresg-payment-service:latest"
          "postgres:15-alpine"
          "nginx:alpine"
          "rabbitmq:3.13-management-alpine"
        )
        
        for image in "${images[@]}"; do
          echo "Scanning $image..."
          # Using Trivy for vulnerability scanning
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --severity ${{ github.event.inputs.severity_threshold || 'medium' }} \
            --format table $image || echo "⚠️ Scan failed for $image"
        done
        
    - name: 📦 Dependency Security Scan
      if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies'
      run: |
        echo "📦 Scanning for dependency vulnerabilities..."
        
        # Check if we have package.json files (for frontend)
        if [ -f "package.json" ]; then
          echo "Scanning npm dependencies..."
          npm audit --audit-level ${{ github.event.inputs.severity_threshold || 'moderate' }} || echo "⚠️ npm audit found issues"
        fi
        
        # Check for Java dependencies (Maven)
        if [ -f "pom.xml" ]; then
          echo "Scanning Maven dependencies..."
          # Using OWASP Dependency Check
          docker run --rm -v "$(pwd)":/app owasp/dependency-check:latest \
            --scan /app --format JSON --out /app/reports/ || echo "⚠️ Dependency check failed"
        fi
        
    - name: 🔧 Configuration Security Scan
      if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'configuration'
      run: |
        echo "🔧 Scanning configuration files for security issues..."
        
        # Check Docker Compose configuration
        echo "Checking Docker Compose security..."
        if [ -f "compose.yaml" ]; then
          # Check for exposed secrets
          if grep -q "password\|secret\|key" compose.yaml; then
            echo "⚠️ Potential secrets found in compose.yaml"
          fi
          
          # Check for privileged containers
          if grep -q "privileged: true" compose.yaml; then
            echo "⚠️ Privileged containers detected"
          fi
          
          # Check for exposed ports
          if grep -q "ports:" compose.yaml; then
            echo "ℹ️ Exposed ports detected - review for necessity"
          fi
        fi
        
        # Check Nginx configuration
        if [ -f "nginx-gateway.conf" ]; then
          echo "Checking Nginx configuration..."
          # Check for security headers
          if ! grep -q "X-Frame-Options" nginx-gateway.conf; then
            echo "⚠️ Missing X-Frame-Options header"
          fi
          if ! grep -q "X-Content-Type-Options" nginx-gateway.conf; then
            echo "⚠️ Missing X-Content-Type-Options header"
          fi
        fi
        
    - name: 🔍 Network Security Scan
      if: github.event.inputs.scan_type == 'full'
      run: |
        echo "🔍 Running network security scan..."
        
        # Check open ports on the droplet
        echo "Scanning open ports on ${{ env.DROPLET_IP }}..."
        nmap -sT -O ${{ env.DROPLET_IP }} || echo "⚠️ Network scan failed"
        
        # Check SSL/TLS configuration
        echo "Checking SSL/TLS configuration..."
        # Note: This would require HTTPS to be configured
        echo "ℹ️ SSL/TLS check skipped - HTTP only deployment"
        
    - name: 🗄️ Database Security Check
      run: |
        echo "🗄️ Checking database security configuration..."
        
        # Check if database is accessible from outside
        echo "Checking database accessibility..."
        if nc -z ${{ env.DROPLET_IP }} 5432; then
          echo "⚠️ Database port 5432 is accessible from outside"
        else
          echo "✅ Database port is not externally accessible"
        fi
        
        # Check for default credentials
        echo "Checking for default credentials..."
        if grep -q "exploresguser" compose.yaml && grep -q "exploresgpass" compose.yaml; then
          echo "⚠️ Default credentials detected in compose.yaml"
        fi
        
    - name: 🔐 Secrets Management Check
      run: |
        echo "🔐 Checking secrets management..."
        
        # Check for hardcoded secrets in files
        echo "Scanning for potential hardcoded secrets..."
        if grep -r -i "password\|secret\|key\|token" . --exclude-dir=.git --exclude="*.md"; then
          echo "⚠️ Potential hardcoded secrets found"
        else
          echo "✅ No obvious hardcoded secrets found"
        fi
        
        # Check for environment variable usage
        echo "Checking environment variable usage..."
        if grep -q "\${{" compose.yaml; then
          echo "✅ GitHub secrets are being used"
        else
          echo "⚠️ Consider using GitHub secrets for sensitive data"
        fi
        
    - name: 🚨 Security Report Generation
      run: |
        echo "🚨 Generating security report..."
        
        # Create security report
        cat > security-report.md << EOF
        # Security Scan Report
        
        **Date:** $(date)
        **Scan Type:** ${{ github.event.inputs.scan_type || 'full' }}
        **Severity Threshold:** ${{ github.event.inputs.severity_threshold || 'medium' }}
        
        ## Summary
        
        This report contains the results of the security scan for ExploreSG deployment.
        
        ## Findings
        
        - Container vulnerability scan: Completed
        - Dependency scan: Completed  
        - Configuration scan: Completed
        - Network scan: Completed
        - Database security: Completed
        - Secrets management: Completed
        
        ## Recommendations
        
        1. **Regular Updates**: Keep all container images updated
        2. **Secrets Management**: Use GitHub Secrets for sensitive data
        3. **Network Security**: Consider implementing HTTPS
        4. **Database Security**: Use strong passwords and limit access
        5. **Monitoring**: Implement continuous security monitoring
        
        ## Next Steps
        
        - Review all findings above
        - Address critical and high severity issues
        - Implement recommended security measures
        - Schedule regular security scans
        
        EOF
        
        echo "📄 Security report generated"
        cat security-report.md
        
    - name: 📊 Security Metrics
      run: |
        echo "📊 Security Metrics:"
        echo "- Scan completed at: $(date)"
        echo "- Target: ${{ env.DROPLET_IP }}"
        echo "- Scan type: ${{ github.event.inputs.scan_type || 'full' }}"
        echo "- Severity threshold: ${{ github.event.inputs.severity_threshold || 'medium' }}"
        
    - name: ✅ Security Scan Complete
      if: always()
      run: |
        echo "✅ Security scan completed"
        echo "🔒 Regular security scanning helps maintain system security"
        echo "📋 Review the findings and address any critical issues"
